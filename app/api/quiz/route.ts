/* --------------------------------------------------------------------------
   /api/quiz ‚Äì POST
   Body: { topic: string; level: 1-5 }
   Returns: 5 MCQs generated by Gemini 1.0-pro in strict JSON.
--------------------------------------------------------------------------- */
import { NextResponse, type NextRequest } from "next/server"

/* ---------- helpers ---------------------------------------------------- */
function getAttempt(req: NextRequest, topic: string, level: number): number {
  const hdr = req.headers.get("x-quiz-attempt")
  if (hdr) return Number.parseInt(hdr, 10) || 1

  const seed = `${topic}-${level}-${Math.floor(Date.now() / 3_600_000)}` // 1-hour bucket
  let h = 0
  for (let i = 0; i < seed.length; i++) h = (h << 5) - h + seed.charCodeAt(i)
  return (Math.abs(h) % 10) + 1 // 1-10
}

function prompt(topic: string, level: number, attempt: number): string {
  const info = {
    1: ["Beginner", "basic definitions and fundamentals"],
    2: ["Intermediate", "practical problem-solving and usage"],
    3: ["Advanced", "edge-cases, optimisation and theory"],
    4: ["Expert", "architectural and cutting-edge patterns"],
    5: ["Master", "research-level, innovative concepts"],
  } as const

  const [name, focus] = info[level as keyof typeof info] ?? info[2]

  return `You are an assessment specialist. Produce EXACTLY 5 JSON objects (no markdown).
Each represents one multiple-choice question for **${name}** learners of "${topic}".

Rules:
‚Ä¢ 4 answer options, one is correct.
‚Ä¢ Focus on ${focus}.
‚Ä¢ This is attempt #${attempt} ‚Äì do not repeat previous content.
Return ONLY the JSON array with properties:
id, question, options (string[4]), correctAnswer.`
}

/* ---------- Gemini call ------------------------------------------------ */
async function askGemini(topic: string, level: number, attempt: number, apiKey: string): Promise<any[]> {
  const url =
    `https://generativelanguage.googleapis.com/v1beta/models/` + `gemini-1.0-pro:generateContent?key=${apiKey}`

  const body = {
    contents: [{ parts: [{ text: prompt(topic, level, attempt) }] }],
    generationConfig: {
      temperature: 0.8,
      topK: 40,
      topP: 0.9,
      maxOutputTokens: 1024,
      /* üëá Gemini will now respond with pure JSON (no fences / prose) */
      response_mime_type: "application/json",
    },
    safetySettings: [
      { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
      { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_MEDIUM_AND_ABOVE" },
    ],
  }

  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  })

  if (!res.ok) throw new Error(`Gemini ${res.status}: ${await res.text()}`)

  const json = await res.json()
  const raw = json?.candidates?.[0]?.content?.parts?.[0]?.text
  if (!raw) throw new Error("Gemini returned no text")

  // Because we requested `application/json`, raw is guaranteed to be valid JSON.
  const parsed = JSON.parse(raw)
  if (!Array.isArray(parsed) || parsed.length !== 5) {
    throw new Error("Gemini JSON shape invalid")
  }
  return parsed
}

/* ---------- Route handler --------------------------------------------- */
export async function POST(req: NextRequest) {
  try {
    const { topic, level } = await req.json()

    // basic validation
    if (!topic || typeof topic !== "string") return NextResponse.json({ error: "Topic is required" }, { status: 400 })
    if (typeof level !== "number" || level < 1 || level > 5)
      return NextResponse.json({ error: "Level must be 1-5" }, { status: 400 })

    const key = process.env.GEMINI_API_KEY
    if (!key) {
      return NextResponse.json({ error: "GEMINI_API_KEY env var missing" }, { status: 500 })
    }

    const attempt = getAttempt(req, topic.trim(), level)
    const questions = await askGemini(topic.trim(), level, attempt, key)

    return NextResponse.json({
      source: "gemini-1.0-pro",
      topic,
      level,
      attempt,
      questions,
      timestamp: new Date().toISOString(),
    })
  } catch (err) {
    console.error("‚ùå /api/quiz error:", err)
    return NextResponse.json(
      {
        error: "Failed to generate AI questions",
        details: err instanceof Error ? err.message : `${err}`,
      },
      { status: 500 },
    )
  }
}
